Hello world! If this pushes then GitHub is working.

To-do: de-spaghettify, maybe change accelerometer update interval for battery reasons.

0.6.1 I despaghettified the algorithm without making any changes. There is a bug that it counts the strides after a record goes unbroken for half a beat, and not when the stride actually happened. More bugs may exist. I also fixed some bugs with maxTempo.
0.6.0 I added a new algorithm that assumes each beat starts at the lowest acceleration part of the stride. I think it works pretty well. I then forgot to push added an option to attempt error correction, so this is still 0.6.0. It's really bad, but in theory works..? I'm taking it to Long Run tommorrow. I might not work on MetroGnome more until after Team Camp in late July, in which case this is the best error correction algorithm I'll have. It also works pretty well if its not trying to do error correction.

0.5.2 I de-spaghettified some of the code. I also made a button to change the minimum tempo between 120 and 150 BPM. I also changed the "App Category" in the .xcodeproj file to be "Music" since it was listed as books for some reason.
0.5.1 Removed slider, moved min/max code, made button bigger. I have to go now bye!
0.5.0 It plays audio now!!! I'm glad this was doable and I didn't have to code in audio processing. I made it correlated to the person running's tempo somehow. It changes when I run with the phone. I'm not sure how well it works, but I'm tired so I'm going to push and run with it tomorrow. I'll see how well it works then!

0.4.3 I changed some of the watermarks in the algorithm. I also changed the tempo of the test audio files to 180 BPM so the files are smaller. GitHub didn't like individual files being 181 megabytes...
I created three test audio .wav files and added them to this Swift file. One plays a test video for 16 beats/4 measures, one plays for 64 beats/16 measures, and one plays for 1024 beats/256 measures. The files are at 60 BPM since I think that will be an easy number to work with but it doesn't really matter. I'm not counting this as an app version since there haven't been any code changes. I am pushing it to GitHub though. Now I will go on a code-de-spaghettifying project and a .wav file playing project. I'm not sure which will come first.
0.4.2 I modified the algorithm, so instead of not counting highWaterMarks before half a stride passes, it won't count lowWaterMarks until 3/4 of a stride passes. This should fix the algorithm enough for me to work on playing audio files. I also made two other minor changes: it  moves the chord note incrementation into a function called changeNote() for readability, and forces the tempo to be between 120 and 240 BPM to avoid getting into a bad state. Next I will create a test .wav file!
0.4.1 removed most of the percussion by moving the Switch{} statement into the place where it notes the strides. It no longer calls every frame. I also changed the settings in the .xcodeproj file to be like they were in the old Xcode file.
0.4.0 plays a Concert A3 major/minor scale with sometimes A2 chords. The minor chords sound kind of wrong and out of tune, but it's fine since this isn't the final audio it will play. It also makes some clicky sounds sometimes but it isn't crashing..? It's a feature, not a bug. You get some percussion!

0.3.4 no longer has a TonePlayer that plays multiple pitches since that was causing runtime problems/crashes. I also made a new Xcode app called MetroGnome. Will push to Git.
0.3.3 has a TonePlayer that plays multiple pitches, up to 7 since that’s how many I’ll need for the scale.
0.3.2 tries to fix the bug where it hiccups extra strides in a stride. Code is getting spaghettified…
0.3.2 tries to calculate tempo. It doesn’t work. I don’t have time to write a good commit message.
0.3.1 changes the watermarks to -5.0 and 5.0. I also fixed a bug caused by trying to made it only toggle every other stride.
0.3.0 toggles the chord and makes it go up and down an octave with stride. Watermarks are 5.0 and 15.0.

0.2.2 is also sideways and rounds Absolute Jerk to an integer. It also has a MotionManager update interval of .033 seconds instead of .008.
0.2.1 is sideways and just displays the Absolute Jerk value, really big. It also has a MotionManager update interval of .033 seconds instead of .008.
0.2.0 calculates absolute and rotational jerk. I printed it on the screen.

0.1.4 is not even temperament, "Just" tuning I think..? Not entirely sure what it's called.
0.1.3 will be cleaned-up 0.1.2 if CrapGPT can de-spaghetti it without breaking stuff.
0.1.2 was 440 * sqrt(g's), updates more..? Might crash phone, hopefully not...
0.1.1 was 440 * sqrt(g's).
0.1.0 was 128 * g's Hz.

Hello world!


Old MotionManager {
//
//  MotionManager.swift
//  Gnome
//
//  Created by Connor Kale on 4/24/25.
//

import CoreMotion

class MotionManager: ObservableObject {
    private let motionManager = CMMotionManager()
    private let updateInterval = 0.0002 // This might be too low and make it crash...
    
    @Published var accelerometerData: (x: Double, y: Double, z: Double, total: Double) = (0, 0, 0, 0)
    
    init() {
        startAccelerometerUpdates()
    }
    
    private func startAccelerometerUpdates() {
        guard motionManager.isAccelerometerAvailable else {
            print("Accelerometer is not available.")
            return
        }

        motionManager.accelerometerUpdateInterval = updateInterval
        motionManager.startAccelerometerUpdates(to: .main) { [weak self] data, error in
            guard let data = data else {
                if let error = error {
                    print("Accelerometer error: \(error.localizedDescription)")
                }
                return
            }

            let x = data.acceleration.x
            let y = data.acceleration.y
            let z = data.acceleration.z
            let total = sqrt(x * x + y * y + z * z)
            self?.accelerometerData = (x, y, z, total)
        }
    }
    deinit {
        motionManager.stopAccelerometerUpdates()
    }
}
}
